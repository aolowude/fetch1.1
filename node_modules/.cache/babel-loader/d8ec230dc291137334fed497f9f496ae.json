{"ast":null,"code":"import _slicedToArray from \"/Users/aolowude/git/fetch1.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\n\n/**\n * Calculate the top/bottom scroll constraints of a full-screen element vs the viewport\n */\nexport function useScrollConstraints(ref, measureConstraints) {\n  var _useState = useState({\n    top: 0,\n    bottom: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      constraints = _useState2[0],\n      setConstraints = _useState2[1];\n\n  useEffect(function () {\n    if (!measureConstraints) return;\n    var element = ref.current;\n    var viewportHeight = window.innerHeight;\n    var contentTop = element.offsetTop;\n    var contentHeight = element.offsetHeight;\n    var scrollableViewport = viewportHeight - contentTop * 2;\n    var top = Math.min(scrollableViewport - contentHeight, 0);\n    setConstraints({\n      top: top,\n      bottom: 0\n    });\n  }, [measureConstraints]);\n  return constraints;\n}","map":{"version":3,"sources":["/Users/aolowude/git/fetch1.1/src/utils/use-scroll-constraints.ts"],"names":["useState","useEffect","useScrollConstraints","ref","measureConstraints","top","bottom","constraints","setConstraints","element","current","viewportHeight","window","innerHeight","contentTop","offsetTop","contentHeight","offsetHeight","scrollableViewport","Math","min"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAOA;;;AAGA,OAAO,SAASC,oBAAT,CAA8BC,GAA9B,EAAmCC,kBAAnC,EAAgE;AAAA,kBAC/BJ,QAAQ,CAAc;AAC1DK,IAAAA,GAAG,EAAE,CADqD;AAE1DC,IAAAA,MAAM,EAAE;AAFkD,GAAd,CADuB;AAAA;AAAA,MAC9DC,WAD8D;AAAA,MACjDC,cADiD;;AAMrEP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACG,kBAAL,EAAyB;AAEzB,QAAMK,OAAO,GAAGN,GAAG,CAACO,OAApB;AACA,QAAMC,cAAc,GAAGC,MAAM,CAACC,WAA9B;AACA,QAAMC,UAAU,GAAGL,OAAO,CAACM,SAA3B;AACA,QAAMC,aAAa,GAAGP,OAAO,CAACQ,YAA9B;AACA,QAAMC,kBAAkB,GAAGP,cAAc,GAAGG,UAAU,GAAG,CAAzD;AACA,QAAMT,GAAG,GAAGc,IAAI,CAACC,GAAL,CAASF,kBAAkB,GAAGF,aAA9B,EAA6C,CAA7C,CAAZ;AAEAR,IAAAA,cAAc,CAAC;AAAEH,MAAAA,GAAG,EAAHA,GAAF;AAAOC,MAAAA,MAAM,EAAE;AAAf,KAAD,CAAd;AACD,GAXQ,EAWN,CAACF,kBAAD,CAXM,CAAT;AAaA,SAAOG,WAAP;AACD","sourcesContent":["import { useState, useEffect } from \"react\";\n\ninterface Constraints {\n  top: number;\n  bottom: number;\n}\n\n/**\n * Calculate the top/bottom scroll constraints of a full-screen element vs the viewport\n */\nexport function useScrollConstraints(ref, measureConstraints: boolean) {\n  const [constraints, setConstraints] = useState<Constraints>({\n    top: 0,\n    bottom: 0\n  });\n\n  useEffect(() => {\n    if (!measureConstraints) return;\n\n    const element = ref.current;\n    const viewportHeight = window.innerHeight;\n    const contentTop = element.offsetTop;\n    const contentHeight = element.offsetHeight;\n    const scrollableViewport = viewportHeight - contentTop * 2;\n    const top = Math.min(scrollableViewport - contentHeight, 0);\n\n    setConstraints({ top, bottom: 0 });\n  }, [measureConstraints]);\n\n  return constraints;\n}\n"]},"metadata":{},"sourceType":"module"}